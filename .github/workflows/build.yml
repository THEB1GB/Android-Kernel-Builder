name: "Build kernels"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v3

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "‚è∞ Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-22.04
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}

      builddate: "${{ needs.Set-repos.outputs.builddate }}"
      
      withKernelSU: ${{ matrix.repos.withKernelSU }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}
    steps:
      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python2 python3 libarchive-tools

      - name: "‚è∞ Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3

          echo "Setup Anykernel3 => ($ANYKERNEL_REPO)"

      - name: "Download kernel source"
        run: |
          git clone https://gitlab.com/MT6768Lab/KernelTree.git -b 13-stable kernel --depth=1

      - name: "zyc-clang"
        run: |
          mkdir clang
          LATEST_RELEASE_INFO=$(curl -s https://api.github.com/repos/ZyCromerZ/Clang/releases/latest)
          TARBALL_URL=$(echo "$LATEST_RELEASE_INFO" | jq -r '.assets[0].browser_download_url')
          wget -O clang-latest.tar.gz "$TARBALL_URL"
          tar -C clang/ -zxvf clang-latest.tar.gz

      - name: "üòé Set args"
        id: generate-args
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "ü§î PATH Variable: $PATH"

          ARCH=$(echo $params | jq -r ".ARCH")
          CC=$(echo $params | jq -r ".CC")

          args="-j${{ env.THREAD }}"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && args="$args O=${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CC" ]; then
            args="$args CC=${{ env.WORKSPACE }}/$CC"
          fi
          while read -r externalCommand; do
            args="$args $externalCommand"
          done < <(jq -r '.externalCommand | to_entries[] | "\(.key)=${{ env.WORKSPACE }}/\(.value)"' <<< "$params")


          echo "ü§î $args"
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "KernelSU Patch"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          cd kernel
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

      - name: "üëç Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${args}

      - name: "üíõ Upload Image"
        uses: actions/upload-artifact@v3
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: Image-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíô Upload Image.gz"
        uses: actions/upload-artifact@v3
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: Image.gz-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíú Upload dtb"
        uses: actions/upload-artifact@v3
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: dtb-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: "‚ù§Ô∏è Upload dtbo.img"
        uses: actions/upload-artifact@v3
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: dtbo.img-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7

      - name: "‚ù§Ô∏è Pack AnyKernel3.zip"
        if: ${{ env.useAnykernel == 'true' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
          anykernel: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}"
        run: |
          ls -al

          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz-dtb" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz-dtb ./AnyKernel3/
          fi

          cd AnyKernel3/
          zip -q -r "${{ env.anykernel }}.zip" *

      - name: "üíæ Upload AnyKernel3 image => (${{ env.builddate }})"
        uses: actions/upload-artifact@v3
        if: ${{ env.useAnykernel == 'true' }}
        with:
          name: "${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}"
          path: AnyKernel3/*

      - name: üßß Create GitHub Release => (${{ env.builddate }})
        continue-on-error: true
        uses: softprops/action-gh-release@v1
        if: ${{ env.useAnykernel == 'true' && env.release == 'true' }}
        with:
          tag_name: v${{ env.builddate }}.${{ github.run_number }}
          files: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}.zip"
          generate_release_notes: true
